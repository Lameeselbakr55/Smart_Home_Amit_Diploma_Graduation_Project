
HomeAutomation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000860  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f7  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000429  00000000  00000000  00001173  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a7  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e0  00000000  00000000  00001a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001aeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	 uart_init();
  6c:	0e 94 5a 00 	call	0xb4	; 0xb4 <uart_init>
	 SPI_DDR();
  70:	0e 94 4c 00 	call	0x98	; 0x98 <SPI_DDR>
	 SPI_Init();
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_Init>

	while (1) 
    {
		unsigned char control=uart_rev();
  78:	0e 94 63 00 	call	0xc6	; 0xc6 <uart_rev>
		CS_ENABLE();
  7c:	a8 98       	cbi	0x15, 0	; 21
		unsigned char data_rev=SPI_Transfer(control);
  7e:	0e 94 55 00 	call	0xaa	; 0xaa <SPI_Transfer>
		CS_DISABLE();
  82:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	81 ee       	ldi	r24, 0xE1	; 225
  88:	94 e0       	ldi	r25, 0x04	; 4
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x1e>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
  94:	00 00       	nop
  96:	f0 cf       	rjmp	.-32     	; 0x78 <main+0xc>

00000098 <SPI_DDR>:
 */ 

#include "SPI.h"

void SPI_DDR(){
	DDRB|=(1<<MOSI)|(1<<SCK);
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	80 6a       	ori	r24, 0xA0	; 160
  9c:	87 bb       	out	0x17, r24	; 23
	DDRB&=~(1<<MISO);
  9e:	be 98       	cbi	0x17, 6	; 23
	DDRC|=(1<<cs);
  a0:	a0 9a       	sbi	0x14, 0	; 20
  a2:	08 95       	ret

000000a4 <SPI_Init>:



void SPI_Init() {
	//control register : MSTR Mode , Speed = 1MHz , SPI Enable
	SPCR=(1<<MSTR) | (1<<SPR0) | (1<<SPE);
  a4:	81 e5       	ldi	r24, 0x51	; 81
  a6:	8d b9       	out	0x0d, r24	; 13
  a8:	08 95       	ret

000000aa <SPI_Transfer>:

}

unsigned char SPI_Transfer(unsigned char data ) {
	SPDR=data;
  aa:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  ac:	77 9b       	sbis	0x0e, 7	; 14
  ae:	fe cf       	rjmp	.-4      	; 0xac <SPI_Transfer+0x2>
	return SPDR;
  b0:	8f b1       	in	r24, 0x0f	; 15
}
  b2:	08 95       	ret

000000b4 <uart_init>:
	int i=0;
	while(str[i] != '\0'){
		uart_send(str[i]);
		i++;
	}
}
  b4:	87 e6       	ldi	r24, 0x67	; 103
  b6:	89 b9       	out	0x09, r24	; 9
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	88 61       	ori	r24, 0x18	; 24
  bc:	8a b9       	out	0x0a, r24	; 10
  be:	80 b5       	in	r24, 0x20	; 32
  c0:	86 68       	ori	r24, 0x86	; 134
  c2:	80 bd       	out	0x20, r24	; 32
  c4:	08 95       	ret

000000c6 <uart_rev>:



unsigned char uart_rev () {
	while(!(UCSRA&(1<<RXC)));
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <uart_rev>
	return UDR;
  ca:	8c b1       	in	r24, 0x0c	; 12
	
}
  cc:	08 95       	ret

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
